import os
import argparse
from dotenv import load_dotenv
import praw
import google.generativeai as genai

load_dotenv()


def get_reddit_data(reddit_instance, username, limit=50):
    print(f"\nFetching up to {limit} comments and posts for user: {username}...")
    try:
        redditor = reddit_instance.redditor(username)
        user_content = []

        print("Fetching comments...")
        comments = list(redditor.comments.new(limit=limit))
        for comment in comments:
            content_string = (
                f"COMMENT\n"
                f"URL: https://www.reddit.com{comment.permalink}\n"
                f"CONTENT:\n{comment.body}\n"
            )
            user_content.append(content_string)

        print("Fetching posts...")
        posts = list(redditor.submissions.new(limit=limit))
        for post in posts:
            content_string = (
                f"POST\n"
                f"URL: https://www.reddit.com{post.permalink}\n"
                f"TITLE: {post.title}\n"
                f"CONTENT:\n{post.selftext}\n"
            )
            user_content.append(content_string)

        if not user_content:
            print(f"No public comments or posts found for user {username}.")
            return None

        print(f"Found {len(user_content)} total items.")
        return "\n".join(user_content)

    except Exception as e:
        print(f"Error fetching data for {username}: {e}")
        return None


def generate_user_persona(username, user_data):
    print("Contacting Gemini to generate a detailed user persona...")

    try:
        google_api_key = os.getenv("GOOGLE_API_KEY")
        if not google_api_key:
            return "Error: Gemini API Key not configured."

        genai.configure(api_key=google_api_key)
        model = genai.GenerativeModel("gemini-1.5-flash-latest")

    except Exception as e:
        return f"Error configuring Gemini API: {e}"

    script_dir = os.path.dirname(os.path.abspath(__file__))
    prompt_path = os.path.join(script_dir, "prompt.txt")
    try:
        with open(prompt_path, "r", encoding="utf-8") as f:
            prompt_template = f.read()
    except FileNotFoundError:
        return "Error: prompt.txt not found. Please ensure the file exists."

    prompt = (
        prompt_template
        .replace("{username}", username)
        .replace("{user_data}", user_data)
    )

    try:
        response = model.generate_content(prompt)
        print("Persona successfully generated by Gemini.")
        return response.text

    except Exception as e:
        print(f"Error during Gemini API call: {e}")
        return f"Error during persona generation: {e}"


def save_persona_to_file(username, persona_text):
    os.makedirs("personas", exist_ok=True)
    filename = f"personas/{username}_persona.txt"

    try:
        with open(filename, "w", encoding="utf-8") as f:
            f.write(persona_text)
        print(f"Persona saved successfully to {filename}")
    except Exception as e:
        print(f"Error saving file: {e}")


def main():
    parser = argparse.ArgumentParser(
        description="Generate a Reddit user persona from their profile URL."
    )
    parser.add_argument(
        "url",
        help="The full URL of the Reddit user's profile."
    )
    args = parser.parse_args()

    try:
        username = args.url.split("/user/")[1].split("/")[0]
    except IndexError:
        print(
            "Error: Invalid Reddit user URL. "
            "Use format like 'https://www.reddit.com/user/username/'."
        )
        return

    print(f"Starting persona generation for Reddit user: {username}")

    try:
        reddit = praw.Reddit(
            client_id=os.getenv("REDDIT_CLIENT_ID"),
            client_secret=os.getenv("REDDIT_CLIENT_SECRET"),
            user_agent=os.getenv("REDDIT_USER_AGENT"),
            read_only=True,
        )
        reddit.redditor(username).id
        print("Reddit API connection successful.")
    except Exception as e:
        print(f"Error connecting to Reddit or finding user: {e}")
        return

    scraped_data = get_reddit_data(reddit, username)

    if not scraped_data:
        print("Process finished. No data to analyze.")
        return

    persona = generate_user_persona(username, scraped_data)
    save_persona_to_file(username, persona)

    print("Process complete.")


if __name__ == "__main__":
    main()
